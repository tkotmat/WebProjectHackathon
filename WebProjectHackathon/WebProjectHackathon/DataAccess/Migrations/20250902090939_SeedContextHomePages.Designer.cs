// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace WebProjectHackathon.DataAccess.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20250902090939_SeedContextHomePages")]
    partial class SeedContextHomePages
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.8");

            modelBuilder.Entity("WebProjectHackathon.DataAccess.Entity.CircleContextPagesInfoEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("CircleContextPagesInfos");
                });

            modelBuilder.Entity("WebProjectHackathon.DataAccess.Entity.ContextHomePagesEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ContextHomePages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Створює зовнішній інтерфейс сайтів та веб-додатків. Відповідає за вигляд, інтерактивність та коректну роботу веб-сторінок на різних пристроях. Використовує HTML, CSS, JavaScript та сучасні фреймворки.",
                            Title = "Frontend-розробник"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Розробляє логіку роботи сервера, баз даних та API, які забезпечують функціонування сайту. Працює з мовами програмування, такими як Python, PHP, Java, та базами даних MySQL або PostgreSQL.",
                            Title = "Backend-розробник"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Шукає та адаптує нових спеціалістів, створює комфортну атмосферу у команді, проводить співбесіди та допомагає з розвитком персоналу. Відповідає за побудову сильної корпоративної культури.",
                            Title = "HR Manager"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Проектує інтерфейси, роблячи їх зручними, доступними та привабливими для користувачів. Використовує інструменти дизайну, такі як Figma, Adobe XD, та аналізує поведінку користувачів для покращення взаємодії.",
                            Title = "UX/UI Дизайнер"
                        });
                });

            modelBuilder.Entity("WebProjectHackathon.DataAccess.Entity.MainPanelContextEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CircleContextPagesInfoEntityId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Context")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CircleContextPagesInfoEntityId");

                    b.ToTable("MainPanelContexts");
                });

            modelBuilder.Entity("WebProjectHackathon.DataAccess.Entity.MainPanelContextEntity", b =>
                {
                    b.HasOne("WebProjectHackathon.DataAccess.Entity.CircleContextPagesInfoEntity", "CircleContextPagesInfo")
                        .WithMany()
                        .HasForeignKey("CircleContextPagesInfoEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CircleContextPagesInfo");
                });
#pragma warning restore 612, 618
        }
    }
}
